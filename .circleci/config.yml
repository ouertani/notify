version: 2

references:
  node_image: &node_image
    docker:
      - image: circleci/node:10

  python_node_image: &python_node_image
    docker:
      - image: circleci/python:3.6.5-node

  python_node_postgres_images: &python_node_postgres_images
    docker:
      - image: circleci/python:3.6.5-node
      - image: circleci/postgres:9.6-alpine
        environment:
          POSTGRES_USER: circleci
          POSTGRES_DB: test_notification_api

  deploy_image: &deploy_image
    docker:
      - image: circleci/python:3.6.5-node

  undeploy_image: &undeploy_image
    docker:
      - image: circleci/python:3.7-node

  attach_workspace: &attach_workspace
    attach_workspace:
      at: .

  aws_install: &aws_install
    run:
      command: |
        curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
        unzip awscli-bundle.zip
        ./awscli-bundle/install -b ~/bin/aws
        echo export PATH="$HOME/bin:\$PATH" >> $BASH_ENV
        source $BASH_ENV

  cf_install: &cf_install
    run:
      command: |
        curl -L "https://packages.cloudfoundry.org/stable?release=linux64-binary&source=github" | tar -zx
        mkdir -p `pwd`/bin
        chmod +x ./cf
        mv ./cf bin/
        echo export PATH="$PWD/bin:\$PATH" >> $BASH_ENV
        source $BASH_ENV
        cf install-plugin -f https://github.com/contraband/autopilot/releases/download/0.0.8/autopilot-linux

  cf_login: &cf_login
    run:
      command: make cf-login

  cf_login_prod: &cf_login_prod
    run:
      command: make cf-login-prod

  master_branch: &master_branch
    filters:
      branches:
        only:
          - master

  not_master_branch: &not_master_branch
    filters:
      branches:
        ignore:
          - master

jobs:
  setup:
    <<: *python_node_image
    steps:
      - checkout
      - persist_to_workspace:
          root: .
          paths:
            - Makefile
            - utils
            - api
            - admin
            - status
            - docs
            - ci

  build-admin:
    <<: *python_node_image
    steps:
      - *attach_workspace
      - run: make admin.install
      - run: make -C admin build-frontend-prod
      - run: make admin.build
      - persist_to_workspace:
          root: .
          paths:
            - admin

  build-dev-admin:
    <<: *python_node_image
    steps:
      - *attach_workspace
      - run: make admin.install
      - run: make -C admin build-frontend
      - run: make admin.build
      - persist_to_workspace:
          root: .
          paths:
            - admin

  build-api:
    <<: *python_node_image
    steps:
      - *attach_workspace
      - run: make api.install
      - run: make api.build
      - persist_to_workspace:
          root: .
          paths:
            - api

  build-utils:
    <<: *python_node_image
    steps:
      - *attach_workspace
      - run: make utils.install
      - run: make utils.build

  install-docs:
    <<: *node_image
    steps:
      - *attach_workspace
      - run: make docs.install
      - persist_to_workspace:
          root: .
          paths:
            - docs

  test-docs:
    <<: *node_image
    steps:
      - *attach_workspace
      - run: make docs.install
      - run: make docs.test

  test-admin:
    <<: *python_node_image
    steps:
      - *attach_workspace
      - run: make admin.install-dev
      - run: echo 're-enable tests here'
      - run: echo 'make admin.test'

  test-api:
    <<: *python_node_postgres_images
    steps:
      - *attach_workspace
      - run: make api.install-dev
      - run: make api.test

  test-utils:
    <<: *python_node_postgres_images
    steps:
      - *attach_workspace
      - run: make utils.install-dev
      - run: echo 're-enable tests here'
      - run: echo 'make utils.test'

  check-vulnerabilities:
    <<: *python_node_postgres_images
    steps:
      - *attach_workspace
      - run: make admin.install-dev
      - run: make api.install-dev
      - run: make utils.install-dev
      - run: make check-vulnerabilities

  cleanup-old-deploys:
    <<: *undeploy_image
    steps:
      - *aws_install
      - *cf_install
      - *attach_workspace
      - *cf_login
      - run: make -C ci undeploy-feature-branches

  deploy-dev-admin:
    <<: *deploy_image
    steps:
      - *cf_install
      - *attach_workspace
      - *cf_login
      - run: make admin.deploy-dev

  deploy-dev-api:
    <<: *deploy_image
    steps:
      - *aws_install
      - *cf_install
      - *attach_workspace
      - *cf_login
      - run: make ci.create-service-psql
      - run: make api.deploy-dev
      # Need the API to be running so that the callback can auto-subscribe.
      - run: make ci.setup-ses-callback
      - run: make -C api create-sap-oauth2-client

  deploy-dev-celery-worker:
    <<: *deploy_image
    steps:
      - *cf_install
      - *attach_workspace
      - *cf_login
      - run: make ci.create-service-psql
      - run: make api.deploy-dev-celery-worker

  deploy-dev-celery-beat:
    <<: *deploy_image
    steps:
      - *cf_install
      - *attach_workspace
      - *cf_login
      - run: make ci.create-service-psql
      - run: make api.deploy-dev-celery-beat

  deploy-dev-docs:
    <<: *node_image
    steps:
      - *cf_install
      - *attach_workspace
      - *cf_login
      - run: make docs.build
      - run: make docs.deploy-dev

  deploy-prod-admin:
    <<: *deploy_image
    steps:
      - *cf_install
      - *attach_workspace
      - *cf_login_prod
      - run: make admin.deploy

  deploy-prod-api:
    <<: *deploy_image
    steps:
      - *cf_install
      - *attach_workspace
      - *cf_login_prod
      - run: make api.deploy

  deploy-prod-celery-worker:
    <<: *deploy_image
    steps:
      - *cf_install
      - *attach_workspace
      - *cf_login_prod
      - run: make api.deploy-celery-worker

  deploy-prod-celery-beat:
    <<: *deploy_image
    steps:
      - *cf_install
      - *attach_workspace
      - *cf_login_prod
      - run: make api.deploy-celery-beat

  deploy-statuspage:
    docker:
      - image: circleci/ruby:2.3-node
    steps:
      - *cf_install
      - *attach_workspace
      - *cf_login_prod
      - run: make status.deploy

  deploy-docs:
    <<: *node_image
    steps:
      - *cf_install
      - *attach_workspace
      - *cf_login_prod
      - run:
          command: make docs.build
          environment:
            GATSBY_NOTIFY_BASE_URL: https://notify.gov.au
      - run: make docs.deploy

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - setup
      - build-admin:
          requires:
            - setup

      - build-dev-admin:
          requires:
            - setup

      - build-api:
          requires:
            - setup

      - build-utils:
          requires:
            - setup

      - install-docs:
          requires:
            - setup

      - test-docs:
          requires:
            - setup

      - test-admin:
          requires:
            - setup

      - test-api:
          requires:
            - setup

      - test-utils:
          requires:
            - setup

      - check-vulnerabilities:
          requires:
            - setup

      - deploy-dev-admin:
          requires:
            - build-dev-admin

      - deploy-dev-api:
          requires:
            - build-api

      - deploy-dev-celery-worker:
          requires:
            - build-api

      - deploy-dev-celery-beat:
          requires:
            - build-api

      - deploy-dev-docs:
          requires:
            - install-docs

      - cleanup-old-deploys:
          requires:
            - setup

      - unlock-prod-deploy:
          <<: *master_branch
          type: approval
          requires:
            - build-utils
            - test-utils
            - test-api
            - test-admin
            - test-docs
            - check-vulnerabilities
            - deploy-dev-api
            - deploy-dev-admin
            - deploy-dev-celery-worker
            - deploy-dev-celery-beat
            - deploy-dev-docs

      - deploy-prod-admin:
          <<: *master_branch
          requires:
            - unlock-prod-deploy

      - deploy-prod-api:
          <<: *master_branch
          requires:
            - unlock-prod-deploy

      - deploy-prod-celery-worker:
          <<: *master_branch
          requires:
            - unlock-prod-deploy

      - deploy-prod-celery-beat:
          <<: *master_branch
          requires:
            - unlock-prod-deploy

      - deploy-statuspage:
          <<: *master_branch
          requires:
            - unlock-prod-deploy

      - deploy-docs:
          <<: *master_branch
          requires:
            - unlock-prod-deploy
