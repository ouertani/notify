# coding: utf-8

"""
    SAP Digital Interconnect LiveLink 365

    The SAP Live Link 365 is a communication platform as a service (CPaaS) that leverages robust delivery technology, SAP’s global relationships, and the power of SAP’s Cloud Platform to provide affordable, scalable, and global messaging solutions for best in class SMS management.  # noqa: E501

    The version of the OpenAPI document: v1.1.0
    Contact: sapdigitalinterconnect@sap.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from app.sap_client.api_client import ApiClient
from app.sap_client.exceptions import (
    ApiTypeError,
    ApiValueError
)


class SMSV20Api(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def query_mo_using_get1(self, start_utc_time, end_utc_time, page_index, **kwargs):  # noqa: E501
        """Poll MO (Mobile Originated) Responses  # noqa: E501

        Pull historical data on MO (Mobile Originated) incoming replies that were received within a specific time frame.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.query_mo_using_get1(start_utc_time, end_utc_time, page_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int start_utc_time: UTC time in 'yyyyMMddHHmm' format Example: 201709011230 (required)
        :param int end_utc_time: UTC time in 'yyyyMMddHHmm' format Example: 201709020130 (required)
        :param int page_index: Response to MO query is paginated. Each page has a size of 10, meaning it holds the details of 10 MOs. The pageIndex is the page number from which MOs are to be fetched. It can be an integer between 1 and n, where n is the number of pages available.  For example: Suppose the MO query returns 45 MOs. There will be 5 pages available. pageIndex in this case can be from 1 to 5. (required)
        :param str keyword: Keyword is the word to match in the MO message's body. The check is case-insensitive. For example, if keyword is 'STOP', all MOs that contain STOP in their content body will be fetched.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PollMoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.query_mo_using_get1_with_http_info(start_utc_time, end_utc_time, page_index, **kwargs)  # noqa: E501

    def query_mo_using_get1_with_http_info(self, start_utc_time, end_utc_time, page_index, **kwargs):  # noqa: E501
        """Poll MO (Mobile Originated) Responses  # noqa: E501

        Pull historical data on MO (Mobile Originated) incoming replies that were received within a specific time frame.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.query_mo_using_get1_with_http_info(start_utc_time, end_utc_time, page_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int start_utc_time: UTC time in 'yyyyMMddHHmm' format Example: 201709011230 (required)
        :param int end_utc_time: UTC time in 'yyyyMMddHHmm' format Example: 201709020130 (required)
        :param int page_index: Response to MO query is paginated. Each page has a size of 10, meaning it holds the details of 10 MOs. The pageIndex is the page number from which MOs are to be fetched. It can be an integer between 1 and n, where n is the number of pages available.  For example: Suppose the MO query returns 45 MOs. There will be 5 pages available. pageIndex in this case can be from 1 to 5. (required)
        :param str keyword: Keyword is the word to match in the MO message's body. The check is case-insensitive. For example, if keyword is 'STOP', all MOs that contain STOP in their content body will be fetched.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PollMoResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['start_utc_time', 'end_utc_time', 'page_index', 'keyword']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_mo_using_get1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'start_utc_time' is set
        if self.api_client.client_side_validation and ('start_utc_time' not in local_var_params or  # noqa: E501
                                                        local_var_params['start_utc_time'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `start_utc_time` when calling `query_mo_using_get1`")  # noqa: E501
        # verify the required parameter 'end_utc_time' is set
        if self.api_client.client_side_validation and ('end_utc_time' not in local_var_params or  # noqa: E501
                                                        local_var_params['end_utc_time'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `end_utc_time` when calling `query_mo_using_get1`")  # noqa: E501
        # verify the required parameter 'page_index' is set
        if self.api_client.client_side_validation and ('page_index' not in local_var_params or  # noqa: E501
                                                        local_var_params['page_index'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page_index` when calling `query_mo_using_get1`")  # noqa: E501

        if self.api_client.client_side_validation and 'page_index' in local_var_params and local_var_params['page_index'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `page_index` when calling `query_mo_using_get1`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_utc_time' in local_var_params and local_var_params['start_utc_time'] is not None:  # noqa: E501
            query_params.append(('startUTCTime', local_var_params['start_utc_time']))  # noqa: E501
        if 'end_utc_time' in local_var_params and local_var_params['end_utc_time'] is not None:  # noqa: E501
            query_params.append(('endUTCTime', local_var_params['end_utc_time']))  # noqa: E501
        if 'page_index' in local_var_params and local_var_params['page_index'] is not None:  # noqa: E501
            query_params.append(('pageIndex', local_var_params['page_index']))  # noqa: E501
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/v2/sms/mo', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PollMoResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def query_status_using_get1(self, start_utc_time, end_utc_time, page_index, **kwargs):  # noqa: E501
        """Poll SMS delivery statuses  # noqa: E501

        Pull historical data on MT (Mobile Terminated) message delivery statuses from messages that were sent within a specific time frame.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.query_status_using_get1(start_utc_time, end_utc_time, page_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int start_utc_time: UTC time in 'yyyyMMddHHmm' format Example: 201709011230 (required)
        :param int end_utc_time: UTC time in 'yyyyMMddHHmm' format Example: 201709020130 (required)
        :param int page_index: Response to status query is paginated. Each page has a size of 10, meaning it holds the details of 10 ACKs. The pageIndex is the page number from which ACKs are to be fetched. It can be an integer between 1 and n, where n is the number of pages available.  For example: Suppose the status query returns 68 ACKs. There will be 7 pages available. pageIndex in this case can be from 1 to 7 (required)
        :param str status: Status of the messages to be fetched.  Value meanings: 'all' - All Acks are fetched 'nok' - all errors are fetched 'SENT' - all ACKs with status as 'SENT' are fetched 'DELIVERED' -  all ACKs with status as 'DELIVERED' are fetched 'RECEIVED' - all ACKs with status as 'RECEIVED' are fetched
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PollStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.query_status_using_get1_with_http_info(start_utc_time, end_utc_time, page_index, **kwargs)  # noqa: E501

    def query_status_using_get1_with_http_info(self, start_utc_time, end_utc_time, page_index, **kwargs):  # noqa: E501
        """Poll SMS delivery statuses  # noqa: E501

        Pull historical data on MT (Mobile Terminated) message delivery statuses from messages that were sent within a specific time frame.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.query_status_using_get1_with_http_info(start_utc_time, end_utc_time, page_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int start_utc_time: UTC time in 'yyyyMMddHHmm' format Example: 201709011230 (required)
        :param int end_utc_time: UTC time in 'yyyyMMddHHmm' format Example: 201709020130 (required)
        :param int page_index: Response to status query is paginated. Each page has a size of 10, meaning it holds the details of 10 ACKs. The pageIndex is the page number from which ACKs are to be fetched. It can be an integer between 1 and n, where n is the number of pages available.  For example: Suppose the status query returns 68 ACKs. There will be 7 pages available. pageIndex in this case can be from 1 to 7 (required)
        :param str status: Status of the messages to be fetched.  Value meanings: 'all' - All Acks are fetched 'nok' - all errors are fetched 'SENT' - all ACKs with status as 'SENT' are fetched 'DELIVERED' -  all ACKs with status as 'DELIVERED' are fetched 'RECEIVED' - all ACKs with status as 'RECEIVED' are fetched
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PollStatusResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['start_utc_time', 'end_utc_time', 'page_index', 'status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_status_using_get1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'start_utc_time' is set
        if self.api_client.client_side_validation and ('start_utc_time' not in local_var_params or  # noqa: E501
                                                        local_var_params['start_utc_time'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `start_utc_time` when calling `query_status_using_get1`")  # noqa: E501
        # verify the required parameter 'end_utc_time' is set
        if self.api_client.client_side_validation and ('end_utc_time' not in local_var_params or  # noqa: E501
                                                        local_var_params['end_utc_time'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `end_utc_time` when calling `query_status_using_get1`")  # noqa: E501
        # verify the required parameter 'page_index' is set
        if self.api_client.client_side_validation and ('page_index' not in local_var_params or  # noqa: E501
                                                        local_var_params['page_index'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page_index` when calling `query_status_using_get1`")  # noqa: E501

        if self.api_client.client_side_validation and 'page_index' in local_var_params and local_var_params['page_index'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `page_index` when calling `query_status_using_get1`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_utc_time' in local_var_params and local_var_params['start_utc_time'] is not None:  # noqa: E501
            query_params.append(('startUTCTime', local_var_params['start_utc_time']))  # noqa: E501
        if 'end_utc_time' in local_var_params and local_var_params['end_utc_time'] is not None:  # noqa: E501
            query_params.append(('endUTCTime', local_var_params['end_utc_time']))  # noqa: E501
        if 'page_index' in local_var_params and local_var_params['page_index'] is not None:  # noqa: E501
            query_params.append(('pageIndex', local_var_params['page_index']))  # noqa: E501
        if 'status' in local_var_params and local_var_params['status'] is not None:  # noqa: E501
            query_params.append(('status', local_var_params['status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/v2/sms/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PollStatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def send_sms_using_post(self, body, **kwargs):  # noqa: E501
        """Send SMS message  # noqa: E501

        Send an MT (Mobile Terminated) SMS message to one or more handset devices specified as recipients.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_sms_using_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param SmsRequestV2 body: This is a JSON object with parameters used for SMS sending. Please find a detailed explaination for the fields in the <b>Model</b> section (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: LiveLinkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.send_sms_using_post_with_http_info(body, **kwargs)  # noqa: E501

    def send_sms_using_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Send SMS message  # noqa: E501

        Send an MT (Mobile Terminated) SMS message to one or more handset devices specified as recipients.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_sms_using_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param SmsRequestV2 body: This is a JSON object with parameters used for SMS sending. Please find a detailed explaination for the fields in the <b>Model</b> section (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(LiveLinkResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_sms_using_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in local_var_params or  # noqa: E501
                                                        local_var_params['body'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `send_sms_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/v2/sms', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LiveLinkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
