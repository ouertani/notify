# coding: utf-8

"""
    SAP Digital Interconnect LiveLink 365

    The SAP Live Link 365 is a communication platform as a service (CPaaS) that leverages robust delivery technology, SAP’s global relationships, and the power of SAP’s Cloud Platform to provide affordable, scalable, and global messaging solutions for best in class SMS management.  # noqa: E501

    The version of the OpenAPI document: v1.1.0
    Contact: sapdigitalinterconnect@sap.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from app.sap_client.configuration import Configuration


class DestOrderId(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'destination': 'list[str]',
        'livelink_order_id': 'list[str]'
    }

    attribute_map = {
        'destination': 'destination',
        'livelink_order_id': 'livelinkOrderId'
    }

    def __init__(self, destination=None, livelink_order_id=None, local_vars_configuration=None):  # noqa: E501
        """DestOrderId - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._destination = None
        self._livelink_order_id = None
        self.discriminator = None

        if destination is not None:
            self.destination = destination
        if livelink_order_id is not None:
            self.livelink_order_id = livelink_order_id

    @property
    def destination(self):
        """Gets the destination of this DestOrderId.  # noqa: E501

        Array of numbers that received the message  # noqa: E501

        :return: The destination of this DestOrderId.  # noqa: E501
        :rtype: list[str]
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this DestOrderId.

        Array of numbers that received the message  # noqa: E501

        :param destination: The destination of this DestOrderId.  # noqa: E501
        :type: list[str]
        """

        self._destination = destination

    @property
    def livelink_order_id(self):
        """Gets the livelink_order_id of this DestOrderId.  # noqa: E501

        Array of Live Link IDs identifying each of the requests made to send the message. More than one if SMS splitting occurred  # noqa: E501

        :return: The livelink_order_id of this DestOrderId.  # noqa: E501
        :rtype: list[str]
        """
        return self._livelink_order_id

    @livelink_order_id.setter
    def livelink_order_id(self, livelink_order_id):
        """Sets the livelink_order_id of this DestOrderId.

        Array of Live Link IDs identifying each of the requests made to send the message. More than one if SMS splitting occurred  # noqa: E501

        :param livelink_order_id: The livelink_order_id of this DestOrderId.  # noqa: E501
        :type: list[str]
        """

        self._livelink_order_id = livelink_order_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestOrderId):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DestOrderId):
            return True

        return self.to_dict() != other.to_dict()
