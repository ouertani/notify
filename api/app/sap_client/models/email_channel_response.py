# coding: utf-8

"""
    SAP Digital Interconnect LiveLink 365

    The SAP Live Link 365 is a communication platform as a service (CPaaS) that leverages robust delivery technology, SAP’s global relationships, and the power of SAP’s Cloud Platform to provide affordable, scalable, and global messaging solutions for best in class SMS management.  # noqa: E501

    The version of the OpenAPI document: v1.1.0
    Contact: sapdigitalinterconnect@sap.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from app.sap_client.configuration import Configuration


class EmailChannelResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'error_message': 'str',
        'external_order_id': 'list[str]',
        'successfully': 'bool'
    }

    attribute_map = {
        'error_message': 'errorMessage',
        'external_order_id': 'externalOrderId',
        'successfully': 'successfully'
    }

    def __init__(self, error_message=None, external_order_id=None, successfully=None, local_vars_configuration=None):  # noqa: E501
        """EmailChannelResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._error_message = None
        self._external_order_id = None
        self._successfully = None
        self.discriminator = None

        if error_message is not None:
            self.error_message = error_message
        if external_order_id is not None:
            self.external_order_id = external_order_id
        if successfully is not None:
            self.successfully = successfully

    @property
    def error_message(self):
        """Gets the error_message of this EmailChannelResponse.  # noqa: E501

        Describes the error that occurred while sending the email.  # noqa: E501

        :return: The error_message of this EmailChannelResponse.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this EmailChannelResponse.

        Describes the error that occurred while sending the email.  # noqa: E501

        :param error_message: The error_message of this EmailChannelResponse.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def external_order_id(self):
        """Gets the external_order_id of this EmailChannelResponse.  # noqa: E501

        Array of order IDs used to identify requests made to the Email Channel.  # noqa: E501

        :return: The external_order_id of this EmailChannelResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._external_order_id

    @external_order_id.setter
    def external_order_id(self, external_order_id):
        """Sets the external_order_id of this EmailChannelResponse.

        Array of order IDs used to identify requests made to the Email Channel.  # noqa: E501

        :param external_order_id: The external_order_id of this EmailChannelResponse.  # noqa: E501
        :type: list[str]
        """

        self._external_order_id = external_order_id

    @property
    def successfully(self):
        """Gets the successfully of this EmailChannelResponse.  # noqa: E501

        Value will be 'true' if message was sent successfully; 'false', otherwise  # noqa: E501

        :return: The successfully of this EmailChannelResponse.  # noqa: E501
        :rtype: bool
        """
        return self._successfully

    @successfully.setter
    def successfully(self, successfully):
        """Sets the successfully of this EmailChannelResponse.

        Value will be 'true' if message was sent successfully; 'false', otherwise  # noqa: E501

        :param successfully: The successfully of this EmailChannelResponse.  # noqa: E501
        :type: bool
        """

        self._successfully = successfully

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailChannelResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EmailChannelResponse):
            return True

        return self.to_dict() != other.to_dict()
