# coding: utf-8

"""
    SAP Digital Interconnect LiveLink 365

    The SAP Live Link 365 is a communication platform as a service (CPaaS) that leverages robust delivery technology, SAP’s global relationships, and the power of SAP’s Cloud Platform to provide affordable, scalable, and global messaging solutions for best in class SMS management.  # noqa: E501

    The version of the OpenAPI document: v1.1.0
    Contact: sapdigitalinterconnect@sap.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from app.sap_client.configuration import Configuration


class EmailRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        '_from': 'str',
        'sender_name': 'str',
        'to': 'list[str]',
        'subject': 'str',
        'message': 'str',
        'reply_to': 'str'
    }

    attribute_map = {
        '_from': 'from',
        'sender_name': 'senderName',
        'to': 'to',
        'subject': 'subject',
        'message': 'message',
        'reply_to': 'replyTo'
    }

    def __init__(self, _from=None, sender_name=None, to=None, subject=None, message=None, reply_to=None, local_vars_configuration=None):  # noqa: E501
        """EmailRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self.__from = None
        self._sender_name = None
        self._to = None
        self._subject = None
        self._message = None
        self._reply_to = None
        self.discriminator = None

        if _from is not None:
            self._from = _from
        if sender_name is not None:
            self.sender_name = sender_name
        if to is not None:
            self.to = to
        if subject is not None:
            self.subject = subject
        if message is not None:
            self.message = message
        if reply_to is not None:
            self.reply_to = reply_to

    @property
    def _from(self):
        """Gets the _from of this EmailRequest.  # noqa: E501

        The email sender.  # noqa: E501

        :return: The _from of this EmailRequest.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this EmailRequest.

        The email sender.  # noqa: E501

        :param _from: The _from of this EmailRequest.  # noqa: E501
        :type: str
        """

        self.__from = _from

    @property
    def sender_name(self):
        """Gets the sender_name of this EmailRequest.  # noqa: E501

        Displays the name of the sender.  # noqa: E501

        :return: The sender_name of this EmailRequest.  # noqa: E501
        :rtype: str
        """
        return self._sender_name

    @sender_name.setter
    def sender_name(self, sender_name):
        """Sets the sender_name of this EmailRequest.

        Displays the name of the sender.  # noqa: E501

        :param sender_name: The sender_name of this EmailRequest.  # noqa: E501
        :type: str
        """

        self._sender_name = sender_name

    @property
    def to(self):
        """Gets the to of this EmailRequest.  # noqa: E501

        Array of one or more entity/email IDs that will receive message.  # noqa: E501

        :return: The to of this EmailRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this EmailRequest.

        Array of one or more entity/email IDs that will receive message.  # noqa: E501

        :param to: The to of this EmailRequest.  # noqa: E501
        :type: list[str]
        """

        self._to = to

    @property
    def subject(self):
        """Gets the subject of this EmailRequest.  # noqa: E501

        The email's subject.  # noqa: E501

        :return: The subject of this EmailRequest.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this EmailRequest.

        The email's subject.  # noqa: E501

        :param subject: The subject of this EmailRequest.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def message(self):
        """Gets the message of this EmailRequest.  # noqa: E501

        The email's body.  # noqa: E501

        :return: The message of this EmailRequest.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this EmailRequest.

        The email's body.  # noqa: E501

        :param message: The message of this EmailRequest.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def reply_to(self):
        """Gets the reply_to of this EmailRequest.  # noqa: E501

        Email where you would like to receive replies to the message that will be sent.  # noqa: E501

        :return: The reply_to of this EmailRequest.  # noqa: E501
        :rtype: str
        """
        return self._reply_to

    @reply_to.setter
    def reply_to(self, reply_to):
        """Sets the reply_to of this EmailRequest.

        Email where you would like to receive replies to the message that will be sent.  # noqa: E501

        :param reply_to: The reply_to of this EmailRequest.  # noqa: E501
        :type: str
        """

        self._reply_to = reply_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EmailRequest):
            return True

        return self.to_dict() != other.to_dict()
