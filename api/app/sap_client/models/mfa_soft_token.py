# coding: utf-8

"""
    SAP Digital Interconnect LiveLink 365

    The SAP Live Link 365 is a communication platform as a service (CPaaS) that leverages robust delivery technology, SAP’s global relationships, and the power of SAP’s Cloud Platform to provide affordable, scalable, and global messaging solutions for best in class SMS management.  # noqa: E501

    The version of the OpenAPI document: v1.1.0
    Contact: sapdigitalinterconnect@sap.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from app.sap_client.configuration import Configuration


class MfaSoftToken(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'client_id': 'int',
        'client_name': 'str',
        'message': 'str',
        'secret_key': 'int',
        'soft_token': 'str',
        'soft_token_qr_code': 'str',
        'success': 'bool',
        'user_id': 'str'
    }

    attribute_map = {
        'client_id': 'clientId',
        'client_name': 'clientName',
        'message': 'message',
        'secret_key': 'secretKey',
        'soft_token': 'softToken',
        'soft_token_qr_code': 'softTokenQRCode',
        'success': 'success',
        'user_id': 'userId'
    }

    def __init__(self, client_id=None, client_name=None, message=None, secret_key=None, soft_token=None, soft_token_qr_code=None, success=None, user_id=None, local_vars_configuration=None):  # noqa: E501
        """MfaSoftToken - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._client_id = None
        self._client_name = None
        self._message = None
        self._secret_key = None
        self._soft_token = None
        self._soft_token_qr_code = None
        self._success = None
        self._user_id = None
        self.discriminator = None

        if client_id is not None:
            self.client_id = client_id
        if client_name is not None:
            self.client_name = client_name
        if message is not None:
            self.message = message
        if secret_key is not None:
            self.secret_key = secret_key
        if soft_token is not None:
            self.soft_token = soft_token
        if soft_token_qr_code is not None:
            self.soft_token_qr_code = soft_token_qr_code
        if success is not None:
            self.success = success
        if user_id is not None:
            self.user_id = user_id

    @property
    def client_id(self):
        """Gets the client_id of this MfaSoftToken.  # noqa: E501

        Unique ID for the registered token.  # noqa: E501

        :return: The client_id of this MfaSoftToken.  # noqa: E501
        :rtype: int
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this MfaSoftToken.

        Unique ID for the registered token.  # noqa: E501

        :param client_id: The client_id of this MfaSoftToken.  # noqa: E501
        :type: int
        """

        self._client_id = client_id

    @property
    def client_name(self):
        """Gets the client_name of this MfaSoftToken.  # noqa: E501

        Name associated to the registered client.  # noqa: E501

        :return: The client_name of this MfaSoftToken.  # noqa: E501
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """Sets the client_name of this MfaSoftToken.

        Name associated to the registered client.  # noqa: E501

        :param client_name: The client_name of this MfaSoftToken.  # noqa: E501
        :type: str
        """

        self._client_name = client_name

    @property
    def message(self):
        """Gets the message of this MfaSoftToken.  # noqa: E501

        Describes the registration's success or failure.  # noqa: E501

        :return: The message of this MfaSoftToken.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this MfaSoftToken.

        Describes the registration's success or failure.  # noqa: E501

        :param message: The message of this MfaSoftToken.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def secret_key(self):
        """Gets the secret_key of this MfaSoftToken.  # noqa: E501

        Secret key associated to the requested token.  # noqa: E501

        :return: The secret_key of this MfaSoftToken.  # noqa: E501
        :rtype: int
        """
        return self._secret_key

    @secret_key.setter
    def secret_key(self, secret_key):
        """Sets the secret_key of this MfaSoftToken.

        Secret key associated to the requested token.  # noqa: E501

        :param secret_key: The secret_key of this MfaSoftToken.  # noqa: E501
        :type: int
        """

        self._secret_key = secret_key

    @property
    def soft_token(self):
        """Gets the soft_token of this MfaSoftToken.  # noqa: E501

        The requested soft token in hexadecimal format.  # noqa: E501

        :return: The soft_token of this MfaSoftToken.  # noqa: E501
        :rtype: str
        """
        return self._soft_token

    @soft_token.setter
    def soft_token(self, soft_token):
        """Sets the soft_token of this MfaSoftToken.

        The requested soft token in hexadecimal format.  # noqa: E501

        :param soft_token: The soft_token of this MfaSoftToken.  # noqa: E501
        :type: str
        """

        self._soft_token = soft_token

    @property
    def soft_token_qr_code(self):
        """Gets the soft_token_qr_code of this MfaSoftToken.  # noqa: E501

        URL for the QR code generated for the soft token.  # noqa: E501

        :return: The soft_token_qr_code of this MfaSoftToken.  # noqa: E501
        :rtype: str
        """
        return self._soft_token_qr_code

    @soft_token_qr_code.setter
    def soft_token_qr_code(self, soft_token_qr_code):
        """Sets the soft_token_qr_code of this MfaSoftToken.

        URL for the QR code generated for the soft token.  # noqa: E501

        :param soft_token_qr_code: The soft_token_qr_code of this MfaSoftToken.  # noqa: E501
        :type: str
        """

        self._soft_token_qr_code = soft_token_qr_code

    @property
    def success(self):
        """Gets the success of this MfaSoftToken.  # noqa: E501

        Value is 'true' if registration and token generation are succesful; false, otherwise.  # noqa: E501

        :return: The success of this MfaSoftToken.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this MfaSoftToken.

        Value is 'true' if registration and token generation are succesful; false, otherwise.  # noqa: E501

        :param success: The success of this MfaSoftToken.  # noqa: E501
        :type: bool
        """

        self._success = success

    @property
    def user_id(self):
        """Gets the user_id of this MfaSoftToken.  # noqa: E501

        The ID that was used to register the user and generate the token.  # noqa: E501

        :return: The user_id of this MfaSoftToken.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this MfaSoftToken.

        The ID that was used to register the user and generate the token.  # noqa: E501

        :param user_id: The user_id of this MfaSoftToken.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MfaSoftToken):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MfaSoftToken):
            return True

        return self.to_dict() != other.to_dict()
