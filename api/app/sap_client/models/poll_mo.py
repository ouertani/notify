# coding: utf-8

"""
    SAP Digital Interconnect LiveLink 365

    The SAP Live Link 365 is a communication platform as a service (CPaaS) that leverages robust delivery technology, SAP’s global relationships, and the power of SAP’s Cloud Platform to provide affordable, scalable, and global messaging solutions for best in class SMS management.  # noqa: E501

    The version of the OpenAPI document: v1.1.0
    Contact: sapdigitalinterconnect@sap.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from app.sap_client.configuration import Configuration


class PollMo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'content_text': 'str',
        'parameters': 'SmsProperties',
        'recipient': 'str',
        'sender': 'str'
    }

    attribute_map = {
        'content_text': 'contentText',
        'parameters': 'parameters',
        'recipient': 'recipient',
        'sender': 'sender'
    }

    def __init__(self, content_text=None, parameters=None, recipient=None, sender=None, local_vars_configuration=None):  # noqa: E501
        """PollMo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._content_text = None
        self._parameters = None
        self._recipient = None
        self._sender = None
        self.discriminator = None

        if content_text is not None:
            self.content_text = content_text
        if parameters is not None:
            self.parameters = parameters
        if recipient is not None:
            self.recipient = recipient
        if sender is not None:
            self.sender = sender

    @property
    def content_text(self):
        """Gets the content_text of this PollMo.  # noqa: E501

        Text sent by the mobile subscriber.  # noqa: E501

        :return: The content_text of this PollMo.  # noqa: E501
        :rtype: str
        """
        return self._content_text

    @content_text.setter
    def content_text(self, content_text):
        """Sets the content_text of this PollMo.

        Text sent by the mobile subscriber.  # noqa: E501

        :param content_text: The content_text of this PollMo.  # noqa: E501
        :type: str
        """

        self._content_text = content_text

    @property
    def parameters(self):
        """Gets the parameters of this PollMo.  # noqa: E501


        :return: The parameters of this PollMo.  # noqa: E501
        :rtype: SmsProperties
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this PollMo.


        :param parameters: The parameters of this PollMo.  # noqa: E501
        :type: SmsProperties
        """

        self._parameters = parameters

    @property
    def recipient(self):
        """Gets the recipient of this PollMo.  # noqa: E501

        Short code or service number dedicated to Enterprise account.  # noqa: E501

        :return: The recipient of this PollMo.  # noqa: E501
        :rtype: str
        """
        return self._recipient

    @recipient.setter
    def recipient(self, recipient):
        """Sets the recipient of this PollMo.

        Short code or service number dedicated to Enterprise account.  # noqa: E501

        :param recipient: The recipient of this PollMo.  # noqa: E501
        :type: str
        """

        self._recipient = recipient

    @property
    def sender(self):
        """Gets the sender of this PollMo.  # noqa: E501

        Phone number of the SMS originator in international format. It is prefixed by 'tel:' always in MOs.  # noqa: E501

        :return: The sender of this PollMo.  # noqa: E501
        :rtype: str
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this PollMo.

        Phone number of the SMS originator in international format. It is prefixed by 'tel:' always in MOs.  # noqa: E501

        :param sender: The sender of this PollMo.  # noqa: E501
        :type: str
        """

        self._sender = sender

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PollMo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PollMo):
            return True

        return self.to_dict() != other.to_dict()
