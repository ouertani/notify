# coding: utf-8

"""
    SAP Digital Interconnect LiveLink 365

    The SAP Live Link 365 is a communication platform as a service (CPaaS) that leverages robust delivery technology, SAP’s global relationships, and the power of SAP’s Cloud Platform to provide affordable, scalable, and global messaging solutions for best in class SMS management.  # noqa: E501

    The version of the OpenAPI document: v1.1.0
    Contact: sapdigitalinterconnect@sap.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from app.sap_client.configuration import Configuration


class PollStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'final_status_indicator': 'str',
        'internal_status_id': 'str',
        'message_body': 'str',
        'operator_id': 'int',
        'order_id': 'str',
        'recipient': 'str',
        'status': 'str',
        'timestamp': 'datetime'
    }

    attribute_map = {
        'final_status_indicator': 'finalStatusIndicator',
        'internal_status_id': 'internalStatusId',
        'message_body': 'messageBody',
        'operator_id': 'operatorId',
        'order_id': 'orderId',
        'recipient': 'recipient',
        'status': 'status',
        'timestamp': 'timestamp'
    }

    def __init__(self, final_status_indicator=None, internal_status_id=None, message_body=None, operator_id=None, order_id=None, recipient=None, status=None, timestamp=None, local_vars_configuration=None):  # noqa: E501
        """PollStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._final_status_indicator = None
        self._internal_status_id = None
        self._message_body = None
        self._operator_id = None
        self._order_id = None
        self._recipient = None
        self._status = None
        self._timestamp = None
        self.discriminator = None

        if final_status_indicator is not None:
            self.final_status_indicator = final_status_indicator
        if internal_status_id is not None:
            self.internal_status_id = internal_status_id
        if message_body is not None:
            self.message_body = message_body
        if operator_id is not None:
            self.operator_id = operator_id
        if order_id is not None:
            self.order_id = order_id
        if recipient is not None:
            self.recipient = recipient
        if status is not None:
            self.status = status
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def final_status_indicator(self):
        """Gets the final_status_indicator of this PollStatus.  # noqa: E501

        Code that indicates the final delivery status of the sent message.  # noqa: E501

        :return: The final_status_indicator of this PollStatus.  # noqa: E501
        :rtype: str
        """
        return self._final_status_indicator

    @final_status_indicator.setter
    def final_status_indicator(self, final_status_indicator):
        """Sets the final_status_indicator of this PollStatus.

        Code that indicates the final delivery status of the sent message.  # noqa: E501

        :param final_status_indicator: The final_status_indicator of this PollStatus.  # noqa: E501
        :type: str
        """

        self._final_status_indicator = final_status_indicator

    @property
    def internal_status_id(self):
        """Gets the internal_status_id of this PollStatus.  # noqa: E501

        Unique identifier for the status the message went through in intermediate steps before final delivery.  # noqa: E501

        :return: The internal_status_id of this PollStatus.  # noqa: E501
        :rtype: str
        """
        return self._internal_status_id

    @internal_status_id.setter
    def internal_status_id(self, internal_status_id):
        """Sets the internal_status_id of this PollStatus.

        Unique identifier for the status the message went through in intermediate steps before final delivery.  # noqa: E501

        :param internal_status_id: The internal_status_id of this PollStatus.  # noqa: E501
        :type: str
        """

        self._internal_status_id = internal_status_id

    @property
    def message_body(self):
        """Gets the message_body of this PollStatus.  # noqa: E501

        Body of the message that was sent as the SMS's content.  # noqa: E501

        :return: The message_body of this PollStatus.  # noqa: E501
        :rtype: str
        """
        return self._message_body

    @message_body.setter
    def message_body(self, message_body):
        """Sets the message_body of this PollStatus.

        Body of the message that was sent as the SMS's content.  # noqa: E501

        :param message_body: The message_body of this PollStatus.  # noqa: E501
        :type: str
        """

        self._message_body = message_body

    @property
    def operator_id(self):
        """Gets the operator_id of this PollStatus.  # noqa: E501

        Unique identifier for the operator that sent the message.  # noqa: E501

        :return: The operator_id of this PollStatus.  # noqa: E501
        :rtype: int
        """
        return self._operator_id

    @operator_id.setter
    def operator_id(self, operator_id):
        """Sets the operator_id of this PollStatus.

        Unique identifier for the operator that sent the message.  # noqa: E501

        :param operator_id: The operator_id of this PollStatus.  # noqa: E501
        :type: int
        """

        self._operator_id = operator_id

    @property
    def order_id(self):
        """Gets the order_id of this PollStatus.  # noqa: E501

        Unique identifier for the order generated in response to the send-SMS request.  # noqa: E501

        :return: The order_id of this PollStatus.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this PollStatus.

        Unique identifier for the order generated in response to the send-SMS request.  # noqa: E501

        :param order_id: The order_id of this PollStatus.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    @property
    def recipient(self):
        """Gets the recipient of this PollStatus.  # noqa: E501

        Phone number that received the message.  # noqa: E501

        :return: The recipient of this PollStatus.  # noqa: E501
        :rtype: str
        """
        return self._recipient

    @recipient.setter
    def recipient(self, recipient):
        """Sets the recipient of this PollStatus.

        Phone number that received the message.  # noqa: E501

        :param recipient: The recipient of this PollStatus.  # noqa: E501
        :type: str
        """

        self._recipient = recipient

    @property
    def status(self):
        """Gets the status of this PollStatus.  # noqa: E501

        Describes the state that the message went through while it was being sent.  # noqa: E501

        :return: The status of this PollStatus.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PollStatus.

        Describes the state that the message went through while it was being sent.  # noqa: E501

        :param status: The status of this PollStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["SENT", "DELIVERED", "RECEIVED"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def timestamp(self):
        """Gets the timestamp of this PollStatus.  # noqa: E501

        Marks the point in time that the message went through the status described in this object.  # noqa: E501

        :return: The timestamp of this PollStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this PollStatus.

        Marks the point in time that the message went through the status described in this object.  # noqa: E501

        :param timestamp: The timestamp of this PollStatus.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PollStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PollStatus):
            return True

        return self.to_dict() != other.to_dict()
