# coding: utf-8

"""
    SAP Digital Interconnect LiveLink 365

    The SAP Live Link 365 is a communication platform as a service (CPaaS) that leverages robust delivery technology, SAP’s global relationships, and the power of SAP’s Cloud Platform to provide affordable, scalable, and global messaging solutions for best in class SMS management.  # noqa: E501

    The version of the OpenAPI document: v1.1.0
    Contact: sapdigitalinterconnect@sap.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from app.sap_client.configuration import Configuration


class SmsProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account_id': 'str',
        'code_tac': 'int',
        'content_text_encoding': 'str',
        'country_code': 'str',
        'cur_time': 'datetime',
        'imode_status': 'int',
        'index_nber': 'int',
        'keyword': 'str',
        'message_class': 'str',
        'mms_status': 'int',
        'operator_code_mcc': 'str',
        'operator_code_mnc': 'str',
        'operator_id': 'str',
        'operator_network': 'str',
        'parental_status': 'str',
        'received_service_number': 'str',
        'received_time': 'str',
        'service_id': 'int',
        'session_id': 'str',
        'tac_code': 'str',
        'timezone': 'str',
        'total_index': 'int'
    }

    attribute_map = {
        'account_id': 'accountId',
        'code_tac': 'codeTac',
        'content_text_encoding': 'contentTextEncoding',
        'country_code': 'countryCode',
        'cur_time': 'curTime',
        'imode_status': 'imodeStatus',
        'index_nber': 'indexNber',
        'keyword': 'keyword',
        'message_class': 'messageClass',
        'mms_status': 'mmsStatus',
        'operator_code_mcc': 'operatorCodeMCC',
        'operator_code_mnc': 'operatorCodeMNC',
        'operator_id': 'operatorId',
        'operator_network': 'operatorNetwork',
        'parental_status': 'parentalStatus',
        'received_service_number': 'receivedServiceNumber',
        'received_time': 'receivedTime',
        'service_id': 'serviceId',
        'session_id': 'sessionId',
        'tac_code': 'tacCode',
        'timezone': 'timezone',
        'total_index': 'totalIndex'
    }

    def __init__(self, account_id=None, code_tac=None, content_text_encoding='UTF8', country_code=None, cur_time=None, imode_status=None, index_nber=None, keyword=None, message_class=None, mms_status=None, operator_code_mcc=None, operator_code_mnc=None, operator_id=None, operator_network=None, parental_status=None, received_service_number=None, received_time=None, service_id=None, session_id=None, tac_code=None, timezone=None, total_index=None, local_vars_configuration=None):  # noqa: E501
        """SmsProperties - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._account_id = None
        self._code_tac = None
        self._content_text_encoding = None
        self._country_code = None
        self._cur_time = None
        self._imode_status = None
        self._index_nber = None
        self._keyword = None
        self._message_class = None
        self._mms_status = None
        self._operator_code_mcc = None
        self._operator_code_mnc = None
        self._operator_id = None
        self._operator_network = None
        self._parental_status = None
        self._received_service_number = None
        self._received_time = None
        self._service_id = None
        self._session_id = None
        self._tac_code = None
        self._timezone = None
        self._total_index = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if code_tac is not None:
            self.code_tac = code_tac
        if content_text_encoding is not None:
            self.content_text_encoding = content_text_encoding
        if country_code is not None:
            self.country_code = country_code
        if cur_time is not None:
            self.cur_time = cur_time
        if imode_status is not None:
            self.imode_status = imode_status
        if index_nber is not None:
            self.index_nber = index_nber
        if keyword is not None:
            self.keyword = keyword
        if message_class is not None:
            self.message_class = message_class
        if mms_status is not None:
            self.mms_status = mms_status
        if operator_code_mcc is not None:
            self.operator_code_mcc = operator_code_mcc
        if operator_code_mnc is not None:
            self.operator_code_mnc = operator_code_mnc
        if operator_id is not None:
            self.operator_id = operator_id
        if operator_network is not None:
            self.operator_network = operator_network
        if parental_status is not None:
            self.parental_status = parental_status
        if received_service_number is not None:
            self.received_service_number = received_service_number
        if received_time is not None:
            self.received_time = received_time
        if service_id is not None:
            self.service_id = service_id
        if session_id is not None:
            self.session_id = session_id
        if tac_code is not None:
            self.tac_code = tac_code
        if timezone is not None:
            self.timezone = timezone
        if total_index is not None:
            self.total_index = total_index

    @property
    def account_id(self):
        """Gets the account_id of this SmsProperties.  # noqa: E501

        ID for the associated account  # noqa: E501

        :return: The account_id of this SmsProperties.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this SmsProperties.

        ID for the associated account  # noqa: E501

        :param account_id: The account_id of this SmsProperties.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def code_tac(self):
        """Gets the code_tac of this SmsProperties.  # noqa: E501

        Optional, region-dependent parameter.  # noqa: E501

        :return: The code_tac of this SmsProperties.  # noqa: E501
        :rtype: int
        """
        return self._code_tac

    @code_tac.setter
    def code_tac(self, code_tac):
        """Sets the code_tac of this SmsProperties.

        Optional, region-dependent parameter.  # noqa: E501

        :param code_tac: The code_tac of this SmsProperties.  # noqa: E501
        :type: int
        """

        self._code_tac = code_tac

    @property
    def content_text_encoding(self):
        """Gets the content_text_encoding of this SmsProperties.  # noqa: E501

        Encoding used for the message's text  # noqa: E501

        :return: The content_text_encoding of this SmsProperties.  # noqa: E501
        :rtype: str
        """
        return self._content_text_encoding

    @content_text_encoding.setter
    def content_text_encoding(self, content_text_encoding):
        """Sets the content_text_encoding of this SmsProperties.

        Encoding used for the message's text  # noqa: E501

        :param content_text_encoding: The content_text_encoding of this SmsProperties.  # noqa: E501
        :type: str
        """
        allowed_values = ["UTF8", "UCS2"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and content_text_encoding not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `content_text_encoding` ({0}), must be one of {1}"  # noqa: E501
                .format(content_text_encoding, allowed_values)
            )

        self._content_text_encoding = content_text_encoding

    @property
    def country_code(self):
        """Gets the country_code of this SmsProperties.  # noqa: E501

        Country code from where message was sent.  # noqa: E501

        :return: The country_code of this SmsProperties.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this SmsProperties.

        Country code from where message was sent.  # noqa: E501

        :param country_code: The country_code of this SmsProperties.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def cur_time(self):
        """Gets the cur_time of this SmsProperties.  # noqa: E501

        Time when message was received  # noqa: E501

        :return: The cur_time of this SmsProperties.  # noqa: E501
        :rtype: datetime
        """
        return self._cur_time

    @cur_time.setter
    def cur_time(self, cur_time):
        """Sets the cur_time of this SmsProperties.

        Time when message was received  # noqa: E501

        :param cur_time: The cur_time of this SmsProperties.  # noqa: E501
        :type: datetime
        """

        self._cur_time = cur_time

    @property
    def imode_status(self):
        """Gets the imode_status of this SmsProperties.  # noqa: E501

        Optional, region-dependent parameter.  # noqa: E501

        :return: The imode_status of this SmsProperties.  # noqa: E501
        :rtype: int
        """
        return self._imode_status

    @imode_status.setter
    def imode_status(self, imode_status):
        """Sets the imode_status of this SmsProperties.

        Optional, region-dependent parameter.  # noqa: E501

        :param imode_status: The imode_status of this SmsProperties.  # noqa: E501
        :type: int
        """

        self._imode_status = imode_status

    @property
    def index_nber(self):
        """Gets the index_nber of this SmsProperties.  # noqa: E501

        Optional, region-dependent paramter.  # noqa: E501

        :return: The index_nber of this SmsProperties.  # noqa: E501
        :rtype: int
        """
        return self._index_nber

    @index_nber.setter
    def index_nber(self, index_nber):
        """Sets the index_nber of this SmsProperties.

        Optional, region-dependent paramter.  # noqa: E501

        :param index_nber: The index_nber of this SmsProperties.  # noqa: E501
        :type: int
        """

        self._index_nber = index_nber

    @property
    def keyword(self):
        """Gets the keyword of this SmsProperties.  # noqa: E501

        Word contained within message that was sought for in request to poll MOs.  # noqa: E501

        :return: The keyword of this SmsProperties.  # noqa: E501
        :rtype: str
        """
        return self._keyword

    @keyword.setter
    def keyword(self, keyword):
        """Sets the keyword of this SmsProperties.

        Word contained within message that was sought for in request to poll MOs.  # noqa: E501

        :param keyword: The keyword of this SmsProperties.  # noqa: E501
        :type: str
        """

        self._keyword = keyword

    @property
    def message_class(self):
        """Gets the message_class of this SmsProperties.  # noqa: E501

        The short message's received type. 0 = Immediate display (flash) 1 = Handset Specific (Live Link Default) 2 = SIM Specific 3 = TE Specific.  # noqa: E501

        :return: The message_class of this SmsProperties.  # noqa: E501
        :rtype: str
        """
        return self._message_class

    @message_class.setter
    def message_class(self, message_class):
        """Sets the message_class of this SmsProperties.

        The short message's received type. 0 = Immediate display (flash) 1 = Handset Specific (Live Link Default) 2 = SIM Specific 3 = TE Specific.  # noqa: E501

        :param message_class: The message_class of this SmsProperties.  # noqa: E501
        :type: str
        """
        allowed_values = ["0", "1", "2", "3"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and message_class not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `message_class` ({0}), must be one of {1}"  # noqa: E501
                .format(message_class, allowed_values)
            )

        self._message_class = message_class

    @property
    def mms_status(self):
        """Gets the mms_status of this SmsProperties.  # noqa: E501

        Optional, region-dependent parameter.  # noqa: E501

        :return: The mms_status of this SmsProperties.  # noqa: E501
        :rtype: int
        """
        return self._mms_status

    @mms_status.setter
    def mms_status(self, mms_status):
        """Sets the mms_status of this SmsProperties.

        Optional, region-dependent parameter.  # noqa: E501

        :param mms_status: The mms_status of this SmsProperties.  # noqa: E501
        :type: int
        """

        self._mms_status = mms_status

    @property
    def operator_code_mcc(self):
        """Gets the operator_code_mcc of this SmsProperties.  # noqa: E501

        The Mobile Country Code of the operator in decimal format.  # noqa: E501

        :return: The operator_code_mcc of this SmsProperties.  # noqa: E501
        :rtype: str
        """
        return self._operator_code_mcc

    @operator_code_mcc.setter
    def operator_code_mcc(self, operator_code_mcc):
        """Sets the operator_code_mcc of this SmsProperties.

        The Mobile Country Code of the operator in decimal format.  # noqa: E501

        :param operator_code_mcc: The operator_code_mcc of this SmsProperties.  # noqa: E501
        :type: str
        """

        self._operator_code_mcc = operator_code_mcc

    @property
    def operator_code_mnc(self):
        """Gets the operator_code_mnc of this SmsProperties.  # noqa: E501

        The Mobile Network Code of the operator in decimal format.  # noqa: E501

        :return: The operator_code_mnc of this SmsProperties.  # noqa: E501
        :rtype: str
        """
        return self._operator_code_mnc

    @operator_code_mnc.setter
    def operator_code_mnc(self, operator_code_mnc):
        """Sets the operator_code_mnc of this SmsProperties.

        The Mobile Network Code of the operator in decimal format.  # noqa: E501

        :param operator_code_mnc: The operator_code_mnc of this SmsProperties.  # noqa: E501
        :type: str
        """

        self._operator_code_mnc = operator_code_mnc

    @property
    def operator_id(self):
        """Gets the operator_id of this SmsProperties.  # noqa: E501

        Unique identifier for the operator that sent the message.  # noqa: E501

        :return: The operator_id of this SmsProperties.  # noqa: E501
        :rtype: str
        """
        return self._operator_id

    @operator_id.setter
    def operator_id(self, operator_id):
        """Sets the operator_id of this SmsProperties.

        Unique identifier for the operator that sent the message.  # noqa: E501

        :param operator_id: The operator_id of this SmsProperties.  # noqa: E501
        :type: str
        """

        self._operator_id = operator_id

    @property
    def operator_network(self):
        """Gets the operator_network of this SmsProperties.  # noqa: E501

        The Operator Network that sent the received message.  # noqa: E501

        :return: The operator_network of this SmsProperties.  # noqa: E501
        :rtype: str
        """
        return self._operator_network

    @operator_network.setter
    def operator_network(self, operator_network):
        """Sets the operator_network of this SmsProperties.

        The Operator Network that sent the received message.  # noqa: E501

        :param operator_network: The operator_network of this SmsProperties.  # noqa: E501
        :type: str
        """

        self._operator_network = operator_network

    @property
    def parental_status(self):
        """Gets the parental_status of this SmsProperties.  # noqa: E501

        Optional, region-dependent paramenter.  # noqa: E501

        :return: The parental_status of this SmsProperties.  # noqa: E501
        :rtype: str
        """
        return self._parental_status

    @parental_status.setter
    def parental_status(self, parental_status):
        """Sets the parental_status of this SmsProperties.

        Optional, region-dependent paramenter.  # noqa: E501

        :param parental_status: The parental_status of this SmsProperties.  # noqa: E501
        :type: str
        """

        self._parental_status = parental_status

    @property
    def received_service_number(self):
        """Gets the received_service_number of this SmsProperties.  # noqa: E501

        Service number sent by the mobile operator.  # noqa: E501

        :return: The received_service_number of this SmsProperties.  # noqa: E501
        :rtype: str
        """
        return self._received_service_number

    @received_service_number.setter
    def received_service_number(self, received_service_number):
        """Sets the received_service_number of this SmsProperties.

        Service number sent by the mobile operator.  # noqa: E501

        :param received_service_number: The received_service_number of this SmsProperties.  # noqa: E501
        :type: str
        """

        self._received_service_number = received_service_number

    @property
    def received_time(self):
        """Gets the received_time of this SmsProperties.  # noqa: E501

        Time when message was received. Date portion is separated from time portion by a single space.  # noqa: E501

        :return: The received_time of this SmsProperties.  # noqa: E501
        :rtype: str
        """
        return self._received_time

    @received_time.setter
    def received_time(self, received_time):
        """Sets the received_time of this SmsProperties.

        Time when message was received. Date portion is separated from time portion by a single space.  # noqa: E501

        :param received_time: The received_time of this SmsProperties.  # noqa: E501
        :type: str
        """

        self._received_time = received_time

    @property
    def service_id(self):
        """Gets the service_id of this SmsProperties.  # noqa: E501


        :return: The service_id of this SmsProperties.  # noqa: E501
        :rtype: int
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this SmsProperties.


        :param service_id: The service_id of this SmsProperties.  # noqa: E501
        :type: int
        """

        self._service_id = service_id

    @property
    def session_id(self):
        """Gets the session_id of this SmsProperties.  # noqa: E501

        Unique identifier for the session that was lifted to receive the MO.  # noqa: E501

        :return: The session_id of this SmsProperties.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this SmsProperties.

        Unique identifier for the session that was lifted to receive the MO.  # noqa: E501

        :param session_id: The session_id of this SmsProperties.  # noqa: E501
        :type: str
        """

        self._session_id = session_id

    @property
    def tac_code(self):
        """Gets the tac_code of this SmsProperties.  # noqa: E501

        The TAC code (Type Allocation Code) is used to identify the handset's terminal type.  # noqa: E501

        :return: The tac_code of this SmsProperties.  # noqa: E501
        :rtype: str
        """
        return self._tac_code

    @tac_code.setter
    def tac_code(self, tac_code):
        """Sets the tac_code of this SmsProperties.

        The TAC code (Type Allocation Code) is used to identify the handset's terminal type.  # noqa: E501

        :param tac_code: The tac_code of this SmsProperties.  # noqa: E501
        :type: str
        """

        self._tac_code = tac_code

    @property
    def timezone(self):
        """Gets the timezone of this SmsProperties.  # noqa: E501

        Time zone from which the message was received.  # noqa: E501

        :return: The timezone of this SmsProperties.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this SmsProperties.

        Time zone from which the message was received.  # noqa: E501

        :param timezone: The timezone of this SmsProperties.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def total_index(self):
        """Gets the total_index of this SmsProperties.  # noqa: E501

        Optional, region-dependent paramenter.  # noqa: E501

        :return: The total_index of this SmsProperties.  # noqa: E501
        :rtype: int
        """
        return self._total_index

    @total_index.setter
    def total_index(self, total_index):
        """Sets the total_index of this SmsProperties.

        Optional, region-dependent paramenter.  # noqa: E501

        :param total_index: The total_index of this SmsProperties.  # noqa: E501
        :type: int
        """

        self._total_index = total_index

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmsProperties):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SmsProperties):
            return True

        return self.to_dict() != other.to_dict()
