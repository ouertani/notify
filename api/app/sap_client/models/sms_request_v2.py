# coding: utf-8

"""
    SAP Digital Interconnect LiveLink 365

    The SAP Live Link 365 is a communication platform as a service (CPaaS) that leverages robust delivery technology, SAP’s global relationships, and the power of SAP’s Cloud Platform to provide affordable, scalable, and global messaging solutions for best in class SMS management.  # noqa: E501

    The version of the OpenAPI document: v1.1.0
    Contact: sapdigitalinterconnect@sap.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from app.sap_client.configuration import Configuration


class SmsRequestV2(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ack_country_code': 'bool',
        'ack_delivered_time': 'bool',
        'ack_final_only': 'bool',
        'ack_final_status': 'bool',
        'ack_internal_status': 'bool',
        'ack_mt_received_time': 'bool',
        'ack_operator_id': 'bool',
        'ack_time_in_gmt': 'bool',
        'ack_tpoa': 'bool',
        'ack_type': 'str',
        'acknowledgement': 'bool',
        'callback': 'str',
        'client_id': 'int',
        'content_text_encoding': 'str',
        'destination': 'list[str]',
        'message': 'str',
        'message_class': 'str',
        'mobile_notification': 'str',
        'operator_id': 'int',
        'origin': 'str',
        'p_id': 'str',
        'random_id': 'int',
        'session_id': 'str',
        'subject': 'str',
        'validity_period': 'str'
    }

    attribute_map = {
        'ack_country_code': 'ackCountryCode',
        'ack_delivered_time': 'ackDeliveredTime',
        'ack_final_only': 'ackFinalOnly',
        'ack_final_status': 'ackFinalStatus',
        'ack_internal_status': 'ackInternalStatus',
        'ack_mt_received_time': 'ackMTReceivedTime',
        'ack_operator_id': 'ackOperatorId',
        'ack_time_in_gmt': 'ackTimeInGMT',
        'ack_tpoa': 'ackTpoa',
        'ack_type': 'ackType',
        'acknowledgement': 'acknowledgement',
        'callback': 'callback',
        'client_id': 'clientId',
        'content_text_encoding': 'contentTextEncoding',
        'destination': 'destination',
        'message': 'message',
        'message_class': 'messageClass',
        'mobile_notification': 'mobileNotification',
        'operator_id': 'operatorId',
        'origin': 'origin',
        'p_id': 'pId',
        'random_id': 'randomId',
        'session_id': 'sessionId',
        'subject': 'subject',
        'validity_period': 'validityPeriod'
    }

    def __init__(self, ack_country_code=False, ack_delivered_time=False, ack_final_only=False, ack_final_status=False, ack_internal_status=False, ack_mt_received_time=False, ack_operator_id=False, ack_time_in_gmt=True, ack_tpoa=False, ack_type=None, acknowledgement=False, callback=None, client_id=None, content_text_encoding='UTF8', destination=None, message=None, message_class='1', mobile_notification=None, operator_id=None, origin=None, p_id=None, random_id=None, session_id=None, subject=None, validity_period=None, local_vars_configuration=None):  # noqa: E501
        """SmsRequestV2 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ack_country_code = None
        self._ack_delivered_time = None
        self._ack_final_only = None
        self._ack_final_status = None
        self._ack_internal_status = None
        self._ack_mt_received_time = None
        self._ack_operator_id = None
        self._ack_time_in_gmt = None
        self._ack_tpoa = None
        self._ack_type = None
        self._acknowledgement = None
        self._callback = None
        self._client_id = None
        self._content_text_encoding = None
        self._destination = None
        self._message = None
        self._message_class = None
        self._mobile_notification = None
        self._operator_id = None
        self._origin = None
        self._p_id = None
        self._random_id = None
        self._session_id = None
        self._subject = None
        self._validity_period = None
        self.discriminator = None

        if ack_country_code is not None:
            self.ack_country_code = ack_country_code
        if ack_delivered_time is not None:
            self.ack_delivered_time = ack_delivered_time
        if ack_final_only is not None:
            self.ack_final_only = ack_final_only
        if ack_final_status is not None:
            self.ack_final_status = ack_final_status
        if ack_internal_status is not None:
            self.ack_internal_status = ack_internal_status
        if ack_mt_received_time is not None:
            self.ack_mt_received_time = ack_mt_received_time
        if ack_operator_id is not None:
            self.ack_operator_id = ack_operator_id
        if ack_time_in_gmt is not None:
            self.ack_time_in_gmt = ack_time_in_gmt
        if ack_tpoa is not None:
            self.ack_tpoa = ack_tpoa
        if ack_type is not None:
            self.ack_type = ack_type
        if acknowledgement is not None:
            self.acknowledgement = acknowledgement
        if callback is not None:
            self.callback = callback
        if client_id is not None:
            self.client_id = client_id
        if content_text_encoding is not None:
            self.content_text_encoding = content_text_encoding
        self.destination = destination
        self.message = message
        if message_class is not None:
            self.message_class = message_class
        if mobile_notification is not None:
            self.mobile_notification = mobile_notification
        if operator_id is not None:
            self.operator_id = operator_id
        if origin is not None:
            self.origin = origin
        if p_id is not None:
            self.p_id = p_id
        if random_id is not None:
            self.random_id = random_id
        if session_id is not None:
            self.session_id = session_id
        if subject is not None:
            self.subject = subject
        if validity_period is not None:
            self.validity_period = validity_period

    @property
    def ack_country_code(self):
        """Gets the ack_country_code of this SmsRequestV2.  # noqa: E501

        Set to true to receive Country Codes in ACKs.  # noqa: E501

        :return: The ack_country_code of this SmsRequestV2.  # noqa: E501
        :rtype: bool
        """
        return self._ack_country_code

    @ack_country_code.setter
    def ack_country_code(self, ack_country_code):
        """Sets the ack_country_code of this SmsRequestV2.

        Set to true to receive Country Codes in ACKs.  # noqa: E501

        :param ack_country_code: The ack_country_code of this SmsRequestV2.  # noqa: E501
        :type: bool
        """

        self._ack_country_code = ack_country_code

    @property
    def ack_delivered_time(self):
        """Gets the ack_delivered_time of this SmsRequestV2.  # noqa: E501

        Set to true to receive ACK delivery times.  # noqa: E501

        :return: The ack_delivered_time of this SmsRequestV2.  # noqa: E501
        :rtype: bool
        """
        return self._ack_delivered_time

    @ack_delivered_time.setter
    def ack_delivered_time(self, ack_delivered_time):
        """Sets the ack_delivered_time of this SmsRequestV2.

        Set to true to receive ACK delivery times.  # noqa: E501

        :param ack_delivered_time: The ack_delivered_time of this SmsRequestV2.  # noqa: E501
        :type: bool
        """

        self._ack_delivered_time = ack_delivered_time

    @property
    def ack_final_only(self):
        """Gets the ack_final_only of this SmsRequestV2.  # noqa: E501

        Set to true to receive only ACKs that have Final Status. Non-final ACKs will be ignored  # noqa: E501

        :return: The ack_final_only of this SmsRequestV2.  # noqa: E501
        :rtype: bool
        """
        return self._ack_final_only

    @ack_final_only.setter
    def ack_final_only(self, ack_final_only):
        """Sets the ack_final_only of this SmsRequestV2.

        Set to true to receive only ACKs that have Final Status. Non-final ACKs will be ignored  # noqa: E501

        :param ack_final_only: The ack_final_only of this SmsRequestV2.  # noqa: E501
        :type: bool
        """

        self._ack_final_only = ack_final_only

    @property
    def ack_final_status(self):
        """Gets the ack_final_status of this SmsRequestV2.  # noqa: E501

        Set to true to receive Final Status Indicators in ACKs.  # noqa: E501

        :return: The ack_final_status of this SmsRequestV2.  # noqa: E501
        :rtype: bool
        """
        return self._ack_final_status

    @ack_final_status.setter
    def ack_final_status(self, ack_final_status):
        """Sets the ack_final_status of this SmsRequestV2.

        Set to true to receive Final Status Indicators in ACKs.  # noqa: E501

        :param ack_final_status: The ack_final_status of this SmsRequestV2.  # noqa: E501
        :type: bool
        """

        self._ack_final_status = ack_final_status

    @property
    def ack_internal_status(self):
        """Gets the ack_internal_status of this SmsRequestV2.  # noqa: E501

        Set to true to receive Internal Status Codes in ACKs.  # noqa: E501

        :return: The ack_internal_status of this SmsRequestV2.  # noqa: E501
        :rtype: bool
        """
        return self._ack_internal_status

    @ack_internal_status.setter
    def ack_internal_status(self, ack_internal_status):
        """Sets the ack_internal_status of this SmsRequestV2.

        Set to true to receive Internal Status Codes in ACKs.  # noqa: E501

        :param ack_internal_status: The ack_internal_status of this SmsRequestV2.  # noqa: E501
        :type: bool
        """

        self._ack_internal_status = ack_internal_status

    @property
    def ack_mt_received_time(self):
        """Gets the ack_mt_received_time of this SmsRequestV2.  # noqa: E501

        Set to true to receive MailSubmitTime in ACKs.  # noqa: E501

        :return: The ack_mt_received_time of this SmsRequestV2.  # noqa: E501
        :rtype: bool
        """
        return self._ack_mt_received_time

    @ack_mt_received_time.setter
    def ack_mt_received_time(self, ack_mt_received_time):
        """Sets the ack_mt_received_time of this SmsRequestV2.

        Set to true to receive MailSubmitTime in ACKs.  # noqa: E501

        :param ack_mt_received_time: The ack_mt_received_time of this SmsRequestV2.  # noqa: E501
        :type: bool
        """

        self._ack_mt_received_time = ack_mt_received_time

    @property
    def ack_operator_id(self):
        """Gets the ack_operator_id of this SmsRequestV2.  # noqa: E501

        Set to true to receive Operator IDs in ACKs.  # noqa: E501

        :return: The ack_operator_id of this SmsRequestV2.  # noqa: E501
        :rtype: bool
        """
        return self._ack_operator_id

    @ack_operator_id.setter
    def ack_operator_id(self, ack_operator_id):
        """Sets the ack_operator_id of this SmsRequestV2.

        Set to true to receive Operator IDs in ACKs.  # noqa: E501

        :param ack_operator_id: The ack_operator_id of this SmsRequestV2.  # noqa: E501
        :type: bool
        """

        self._ack_operator_id = ack_operator_id

    @property
    def ack_time_in_gmt(self):
        """Gets the ack_time_in_gmt of this SmsRequestV2.  # noqa: E501

        Set to true to receive GMT time in ACKs.  # noqa: E501

        :return: The ack_time_in_gmt of this SmsRequestV2.  # noqa: E501
        :rtype: bool
        """
        return self._ack_time_in_gmt

    @ack_time_in_gmt.setter
    def ack_time_in_gmt(self, ack_time_in_gmt):
        """Sets the ack_time_in_gmt of this SmsRequestV2.

        Set to true to receive GMT time in ACKs.  # noqa: E501

        :param ack_time_in_gmt: The ack_time_in_gmt of this SmsRequestV2.  # noqa: E501
        :type: bool
        """

        self._ack_time_in_gmt = ack_time_in_gmt

    @property
    def ack_tpoa(self):
        """Gets the ack_tpoa of this SmsRequestV2.  # noqa: E501

        Set to 'true' to receive TPOA in ACKs.  # noqa: E501

        :return: The ack_tpoa of this SmsRequestV2.  # noqa: E501
        :rtype: bool
        """
        return self._ack_tpoa

    @ack_tpoa.setter
    def ack_tpoa(self, ack_tpoa):
        """Sets the ack_tpoa of this SmsRequestV2.

        Set to 'true' to receive TPOA in ACKs.  # noqa: E501

        :param ack_tpoa: The ack_tpoa of this SmsRequestV2.  # noqa: E501
        :type: bool
        """

        self._ack_tpoa = ack_tpoa

    @property
    def ack_type(self):
        """Gets the ack_type of this SmsRequestV2.  # noqa: E501

        Level of notification SAP will send back.  # noqa: E501

        :return: The ack_type of this SmsRequestV2.  # noqa: E501
        :rtype: str
        """
        return self._ack_type

    @ack_type.setter
    def ack_type(self, ack_type):
        """Sets the ack_type of this SmsRequestV2.

        Level of notification SAP will send back.  # noqa: E501

        :param ack_type: The ack_type of this SmsRequestV2.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "ORDER", "MESSAGE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and ack_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `ack_type` ({0}), must be one of {1}"  # noqa: E501
                .format(ack_type, allowed_values)
            )

        self._ack_type = ack_type

    @property
    def acknowledgement(self):
        """Gets the acknowledgement of this SmsRequestV2.  # noqa: E501

        Set to true if you want to receive ACKs.  # noqa: E501

        :return: The acknowledgement of this SmsRequestV2.  # noqa: E501
        :rtype: bool
        """
        return self._acknowledgement

    @acknowledgement.setter
    def acknowledgement(self, acknowledgement):
        """Sets the acknowledgement of this SmsRequestV2.

        Set to true if you want to receive ACKs.  # noqa: E501

        :param acknowledgement: The acknowledgement of this SmsRequestV2.  # noqa: E501
        :type: bool
        """

        self._acknowledgement = acknowledgement

    @property
    def callback(self):
        """Gets the callback of this SmsRequestV2.  # noqa: E501

        Callback URL which will receive ACKs.  # noqa: E501

        :return: The callback of this SmsRequestV2.  # noqa: E501
        :rtype: str
        """
        return self._callback

    @callback.setter
    def callback(self, callback):
        """Sets the callback of this SmsRequestV2.

        Callback URL which will receive ACKs.  # noqa: E501

        :param callback: The callback of this SmsRequestV2.  # noqa: E501
        :type: str
        """

        self._callback = callback

    @property
    def client_id(self):
        """Gets the client_id of this SmsRequestV2.  # noqa: E501


        :return: The client_id of this SmsRequestV2.  # noqa: E501
        :rtype: int
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this SmsRequestV2.


        :param client_id: The client_id of this SmsRequestV2.  # noqa: E501
        :type: int
        """

        self._client_id = client_id

    @property
    def content_text_encoding(self):
        """Gets the content_text_encoding of this SmsRequestV2.  # noqa: E501

        Specifies the short message's text encoding.  # noqa: E501

        :return: The content_text_encoding of this SmsRequestV2.  # noqa: E501
        :rtype: str
        """
        return self._content_text_encoding

    @content_text_encoding.setter
    def content_text_encoding(self, content_text_encoding):
        """Sets the content_text_encoding of this SmsRequestV2.

        Specifies the short message's text encoding.  # noqa: E501

        :param content_text_encoding: The content_text_encoding of this SmsRequestV2.  # noqa: E501
        :type: str
        """
        allowed_values = ["UTF8", "UCS2"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and content_text_encoding not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `content_text_encoding` ({0}), must be one of {1}"  # noqa: E501
                .format(content_text_encoding, allowed_values)
            )

        self._content_text_encoding = content_text_encoding

    @property
    def destination(self):
        """Gets the destination of this SmsRequestV2.  # noqa: E501

        Array of numbers that will receive the message.  # noqa: E501

        :return: The destination of this SmsRequestV2.  # noqa: E501
        :rtype: list[str]
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this SmsRequestV2.

        Array of numbers that will receive the message.  # noqa: E501

        :param destination: The destination of this SmsRequestV2.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and destination is None:  # noqa: E501
            raise ValueError("Invalid value for `destination`, must not be `None`")  # noqa: E501

        self._destination = destination

    @property
    def message(self):
        """Gets the message of this SmsRequestV2.  # noqa: E501

        Message body for the SMS.  # noqa: E501

        :return: The message of this SmsRequestV2.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this SmsRequestV2.

        Message body for the SMS.  # noqa: E501

        :param message: The message of this SmsRequestV2.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and message is None:  # noqa: E501
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def message_class(self):
        """Gets the message_class of this SmsRequestV2.  # noqa: E501

        Specifies the message class. Message class is an operator dependent feature.  For example: 0 = Immediate display (flash) 1 = Handset Specific (Live Link Default) 2 = SIM Specific 3 = TE Specific.  # noqa: E501

        :return: The message_class of this SmsRequestV2.  # noqa: E501
        :rtype: str
        """
        return self._message_class

    @message_class.setter
    def message_class(self, message_class):
        """Sets the message_class of this SmsRequestV2.

        Specifies the message class. Message class is an operator dependent feature.  For example: 0 = Immediate display (flash) 1 = Handset Specific (Live Link Default) 2 = SIM Specific 3 = TE Specific.  # noqa: E501

        :param message_class: The message_class of this SmsRequestV2.  # noqa: E501
        :type: str
        """
        allowed_values = ["0", "1", "2", "3"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and message_class not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `message_class` ({0}), must be one of {1}"  # noqa: E501
                .format(message_class, allowed_values)
            )

        self._message_class = message_class

    @property
    def mobile_notification(self):
        """Gets the mobile_notification of this SmsRequestV2.  # noqa: E501


        :return: The mobile_notification of this SmsRequestV2.  # noqa: E501
        :rtype: str
        """
        return self._mobile_notification

    @mobile_notification.setter
    def mobile_notification(self, mobile_notification):
        """Sets the mobile_notification of this SmsRequestV2.


        :param mobile_notification: The mobile_notification of this SmsRequestV2.  # noqa: E501
        :type: str
        """
        allowed_values = ["YES", "NO"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and mobile_notification not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `mobile_notification` ({0}), must be one of {1}"  # noqa: E501
                .format(mobile_notification, allowed_values)
            )

        self._mobile_notification = mobile_notification

    @property
    def operator_id(self):
        """Gets the operator_id of this SmsRequestV2.  # noqa: E501

        Used to specify the destination operators for the message.  # noqa: E501

        :return: The operator_id of this SmsRequestV2.  # noqa: E501
        :rtype: int
        """
        return self._operator_id

    @operator_id.setter
    def operator_id(self, operator_id):
        """Sets the operator_id of this SmsRequestV2.

        Used to specify the destination operators for the message.  # noqa: E501

        :param operator_id: The operator_id of this SmsRequestV2.  # noqa: E501
        :type: int
        """

        self._operator_id = operator_id

    @property
    def origin(self):
        """Gets the origin of this SmsRequestV2.  # noqa: E501

        Live Link number from which message will be sent.  # noqa: E501

        :return: The origin of this SmsRequestV2.  # noqa: E501
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this SmsRequestV2.

        Live Link number from which message will be sent.  # noqa: E501

        :param origin: The origin of this SmsRequestV2.  # noqa: E501
        :type: str
        """

        self._origin = origin

    @property
    def p_id(self):
        """Gets the p_id of this SmsRequestV2.  # noqa: E501

        When a special value is needed, it is possible to define this value inside the request by giving the hexadecimal code of the PID desired.  # noqa: E501

        :return: The p_id of this SmsRequestV2.  # noqa: E501
        :rtype: str
        """
        return self._p_id

    @p_id.setter
    def p_id(self, p_id):
        """Sets the p_id of this SmsRequestV2.

        When a special value is needed, it is possible to define this value inside the request by giving the hexadecimal code of the PID desired.  # noqa: E501

        :param p_id: The p_id of this SmsRequestV2.  # noqa: E501
        :type: str
        """

        self._p_id = p_id

    @property
    def random_id(self):
        """Gets the random_id of this SmsRequestV2.  # noqa: E501


        :return: The random_id of this SmsRequestV2.  # noqa: E501
        :rtype: int
        """
        return self._random_id

    @random_id.setter
    def random_id(self, random_id):
        """Sets the random_id of this SmsRequestV2.


        :param random_id: The random_id of this SmsRequestV2.  # noqa: E501
        :type: int
        """

        self._random_id = random_id

    @property
    def session_id(self):
        """Gets the session_id of this SmsRequestV2.  # noqa: E501

        This is needed for session tracking, US campaign tracking, or other purposes. When supported by an operator, you may receive information in the SESSION_ID field of an incoming MO request. Upon receiving such information, you are expected to post it back into the SESSION_ID field of the MT reply.  # noqa: E501

        :return: The session_id of this SmsRequestV2.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this SmsRequestV2.

        This is needed for session tracking, US campaign tracking, or other purposes. When supported by an operator, you may receive information in the SESSION_ID field of an incoming MO request. Upon receiving such information, you are expected to post it back into the SESSION_ID field of the MT reply.  # noqa: E501

        :param session_id: The session_id of this SmsRequestV2.  # noqa: E501
        :type: str
        """

        self._session_id = session_id

    @property
    def subject(self):
        """Gets the subject of this SmsRequestV2.  # noqa: E501

        This field can be useful to set your own unique ID which will be returned in notifications and will ease tracking of messages statuses.  # noqa: E501

        :return: The subject of this SmsRequestV2.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this SmsRequestV2.

        This field can be useful to set your own unique ID which will be returned in notifications and will ease tracking of messages statuses.  # noqa: E501

        :param subject: The subject of this SmsRequestV2.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def validity_period(self):
        """Gets the validity_period of this SmsRequestV2.  # noqa: E501

        Tells how long SAP tries to send the message.The time can be specified in weeks, days, hours or minutes.  # noqa: E501

        :return: The validity_period of this SmsRequestV2.  # noqa: E501
        :rtype: str
        """
        return self._validity_period

    @validity_period.setter
    def validity_period(self, validity_period):
        """Sets the validity_period of this SmsRequestV2.

        Tells how long SAP tries to send the message.The time can be specified in weeks, days, hours or minutes.  # noqa: E501

        :param validity_period: The validity_period of this SmsRequestV2.  # noqa: E501
        :type: str
        """

        self._validity_period = validity_period

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmsRequestV2):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SmsRequestV2):
            return True

        return self.to_dict() != other.to_dict()
