# coding: utf-8

"""
    SAP Digital Interconnect LiveLink 365

    The SAP Live Link 365 is a communication platform as a service (CPaaS) that leverages robust delivery technology, SAP’s global relationships, and the power of SAP’s Cloud Platform to provide affordable, scalable, and global messaging solutions for best in class SMS management.  # noqa: E501

    The version of the OpenAPI document: v1.1.0
    Contact: sapdigitalinterconnect@sap.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from app.sap_client.configuration import Configuration


class SoftTokenValidateRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account_id': 'str',
        'telephone_number': 'int',
        'one_time_password': 'int'
    }

    attribute_map = {
        'account_id': 'accountId',
        'telephone_number': 'telephoneNumber',
        'one_time_password': 'oneTimePassword'
    }

    def __init__(self, account_id=None, telephone_number=None, one_time_password=None, local_vars_configuration=None):  # noqa: E501
        """SoftTokenValidateRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._account_id = None
        self._telephone_number = None
        self._one_time_password = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if telephone_number is not None:
            self.telephone_number = telephone_number
        if one_time_password is not None:
            self.one_time_password = one_time_password

    @property
    def account_id(self):
        """Gets the account_id of this SoftTokenValidateRequest.  # noqa: E501

        The System account that will have access to send messages through the HUB Account. This is the MFA Account ID.  # noqa: E501

        :return: The account_id of this SoftTokenValidateRequest.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this SoftTokenValidateRequest.

        The System account that will have access to send messages through the HUB Account. This is the MFA Account ID.  # noqa: E501

        :param account_id: The account_id of this SoftTokenValidateRequest.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def telephone_number(self):
        """Gets the telephone_number of this SoftTokenValidateRequest.  # noqa: E501

        User phone number that will receive the token password or the email address which was used for token generation.  # noqa: E501

        :return: The telephone_number of this SoftTokenValidateRequest.  # noqa: E501
        :rtype: int
        """
        return self._telephone_number

    @telephone_number.setter
    def telephone_number(self, telephone_number):
        """Sets the telephone_number of this SoftTokenValidateRequest.

        User phone number that will receive the token password or the email address which was used for token generation.  # noqa: E501

        :param telephone_number: The telephone_number of this SoftTokenValidateRequest.  # noqa: E501
        :type: int
        """

        self._telephone_number = telephone_number

    @property
    def one_time_password(self):
        """Gets the one_time_password of this SoftTokenValidateRequest.  # noqa: E501

        Token generated and sent to the mobile handset as an SMS (or email).  # noqa: E501

        :return: The one_time_password of this SoftTokenValidateRequest.  # noqa: E501
        :rtype: int
        """
        return self._one_time_password

    @one_time_password.setter
    def one_time_password(self, one_time_password):
        """Sets the one_time_password of this SoftTokenValidateRequest.

        Token generated and sent to the mobile handset as an SMS (or email).  # noqa: E501

        :param one_time_password: The one_time_password of this SoftTokenValidateRequest.  # noqa: E501
        :type: int
        """

        self._one_time_password = one_time_password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SoftTokenValidateRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SoftTokenValidateRequest):
            return True

        return self.to_dict() != other.to_dict()
