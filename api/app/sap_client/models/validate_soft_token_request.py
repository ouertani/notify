# coding: utf-8

"""
    SAP Digital Interconnect LiveLink 365

    The SAP Live Link 365 is a communication platform as a service (CPaaS) that leverages robust delivery technology, SAP’s global relationships, and the power of SAP’s Cloud Platform to provide affordable, scalable, and global messaging solutions for best in class SMS management.  # noqa: E501

    The version of the OpenAPI document: v1.1.0
    Contact: sapdigitalinterconnect@sap.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from app.sap_client.configuration import Configuration


class ValidateSoftTokenRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'client_id': 'int',
        'user_id': 'str',
        'secret_key': 'int'
    }

    attribute_map = {
        'client_id': 'clientId',
        'user_id': 'userId',
        'secret_key': 'secretKey'
    }

    def __init__(self, client_id=None, user_id=None, secret_key=None, local_vars_configuration=None):  # noqa: E501
        """ValidateSoftTokenRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._client_id = None
        self._user_id = None
        self._secret_key = None
        self.discriminator = None

        self.client_id = client_id
        self.user_id = user_id
        self.secret_key = secret_key

    @property
    def client_id(self):
        """Gets the client_id of this ValidateSoftTokenRequest.  # noqa: E501

        The System account that will have access to send messages through the HUB Account. This is the MFA Account ID.  # noqa: E501

        :return: The client_id of this ValidateSoftTokenRequest.  # noqa: E501
        :rtype: int
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this ValidateSoftTokenRequest.

        The System account that will have access to send messages through the HUB Account. This is the MFA Account ID.  # noqa: E501

        :param client_id: The client_id of this ValidateSoftTokenRequest.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and client_id is None:  # noqa: E501
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def user_id(self):
        """Gets the user_id of this ValidateSoftTokenRequest.  # noqa: E501

        Could be a phone number, an email, or a name.  # noqa: E501

        :return: The user_id of this ValidateSoftTokenRequest.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ValidateSoftTokenRequest.

        Could be a phone number, an email, or a name.  # noqa: E501

        :param user_id: The user_id of this ValidateSoftTokenRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and user_id is None:  # noqa: E501
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def secret_key(self):
        """Gets the secret_key of this ValidateSoftTokenRequest.  # noqa: E501

        Key generated by Google authenticator. To generate this secret key , you can either scan the QR code which you get in the response for register token or generate it from the soft token.  # noqa: E501

        :return: The secret_key of this ValidateSoftTokenRequest.  # noqa: E501
        :rtype: int
        """
        return self._secret_key

    @secret_key.setter
    def secret_key(self, secret_key):
        """Sets the secret_key of this ValidateSoftTokenRequest.

        Key generated by Google authenticator. To generate this secret key , you can either scan the QR code which you get in the response for register token or generate it from the soft token.  # noqa: E501

        :param secret_key: The secret_key of this ValidateSoftTokenRequest.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and secret_key is None:  # noqa: E501
            raise ValueError("Invalid value for `secret_key`, must not be `None`")  # noqa: E501

        self._secret_key = secret_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ValidateSoftTokenRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ValidateSoftTokenRequest):
            return True

        return self.to_dict() != other.to_dict()
