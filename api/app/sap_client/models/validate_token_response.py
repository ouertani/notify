# coding: utf-8

"""
    SAP Digital Interconnect LiveLink 365

    The SAP Live Link 365 is a communication platform as a service (CPaaS) that leverages robust delivery technology, SAP’s global relationships, and the power of SAP’s Cloud Platform to provide affordable, scalable, and global messaging solutions for best in class SMS management.  # noqa: E501

    The version of the OpenAPI document: v1.1.0
    Contact: sapdigitalinterconnect@sap.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from app.sap_client.configuration import Configuration


class ValidateTokenResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'message_body': 'str',
        'status': 'str'
    }

    attribute_map = {
        'message_body': 'messageBody',
        'status': 'status'
    }

    def __init__(self, message_body=None, status=None, local_vars_configuration=None):  # noqa: E501
        """ValidateTokenResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._message_body = None
        self._status = None
        self.discriminator = None

        if message_body is not None:
            self.message_body = message_body
        if status is not None:
            self.status = status

    @property
    def message_body(self):
        """Gets the message_body of this ValidateTokenResponse.  # noqa: E501

        Describes any errors in the validation process.  # noqa: E501

        :return: The message_body of this ValidateTokenResponse.  # noqa: E501
        :rtype: str
        """
        return self._message_body

    @message_body.setter
    def message_body(self, message_body):
        """Sets the message_body of this ValidateTokenResponse.

        Describes any errors in the validation process.  # noqa: E501

        :param message_body: The message_body of this ValidateTokenResponse.  # noqa: E501
        :type: str
        """

        self._message_body = message_body

    @property
    def status(self):
        """Gets the status of this ValidateTokenResponse.  # noqa: E501

        Describes the validation process's success or failure.  # noqa: E501

        :return: The status of this ValidateTokenResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ValidateTokenResponse.

        Describes the validation process's success or failure.  # noqa: E501

        :param status: The status of this ValidateTokenResponse.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ValidateTokenResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ValidateTokenResponse):
            return True

        return self.to_dict() != other.to_dict()
